Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1:

Input: [3,0,1]
Output: 2
Example 2:

Input: [9,6,4,2,3,5,7,0,1]
Output: 8
Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?


* 1. Java Map( really bad idea)
```java
class Solution {
    public int missingNumber(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<nums.length+1; i++){
            map.put(i, 0);
        }
        for(int i=0; i<nums.length; i++){
            map.put(nums[i],1);
        }
        
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            if(entry.getValue() == 0)
                return entry.getKey();
        }
        throw new IllegalArgumentException("No solution");
    }
}
```

* 2.Bit Manipulation (XOR) 666
Because we know that nums contains nn numbers and that it is missing exactly one number on the range [0..n-1][0..n−1], 
we know that nn definitely replaces the missing number in nums. 
Therefore, if we initialize an integer to nn and XOR it with every index and value, 
we will be left with the missing number. 
Consider the following example (the values have been sorted for intuitive convenience, but need not be):

Index	0	1	2	3
Value	0	1	3	4
missing
=4∧(0∧0)∧(1∧1)∧(2∧3)∧(3∧4)
=(4∧4)∧(0∧0)∧(1∧1)∧(3∧3)∧2
=0∧0∧0∧0∧2
=2
 
```java
class Solution {
    public int missingNumber(int[] nums) {
        int missing = nums.length;
        for (int i = 0; i < nums.length; i++) {
            missing ^= i ^ nums[i];
        }
        return missing;
    }
}
```

* 3.Gauss' Formula 
calculate sum

```java
class Solution {
    public int missingNumber(int[] nums) {
        int expectedSum = nums.length*(nums.length + 1)/2;
        int actualSum = 0;
        for (int num : nums) actualSum += num;
        return expectedSum - actualSum;
    }
}
```

